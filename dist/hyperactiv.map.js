!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=function(e){return e&&"object"==typeof e&&!(e instanceof Date)},r=Array.isArray,o=function(e,t,r,u){Object.defineProperty(e,"__key",{value:t,enumerable:!1,configurable:!0}),Object.defineProperty(e,"__parent",{value:r,enumerable:!1,configurable:!0}),u&&Object.entries(e).forEach(function([t,r]){!n(r)||r.__key&&r.__parent||o(e[t],t,e)})},u={timeout:null,queue:new Set,process(){for(const e of u.queue)e();u.queue.clear(),u.timeout=null},enqueue(e){null===u.timeout&&(u.timeout=setTimeout(u.process,0)),u.queue.add(e)}},c=function(t,{autoRun:n=!0,callback:r=null,bind:o=null}={}){const u=new Proxy(t,{apply(t,n,c){const s=function(s=null){e.unshift(r||u);const i=s?s():t.apply(o||n,c);return e.shift(),i};return c.push({computeAsync:function(e){return s(e)}}),s()}});return n&&u(),u},s=function(e){return e.__disposed=!0},i=function(c,s={}){const{props:l=null,ignore:a=null,batch:d=!1,deep:f=!1,bubble:p=null,bind:_=!1}=s;if(c.__observed)return c;t.set(c,new Map),f&&Object.entries(c).forEach(function([e,t]){n(t)&&(c[e]=i(t,s),p&&o(c[e],e,c))});const b=new Proxy(c,{get(n,r){if("__observed"===r)return!0;if((!l||l.includes(r))&&(!a||!a.includes(r))&&e.length){const n=t.get(c);n.has(r)||n.set(r,new Set),n.get(r).add(e[0])}return c[r]},set(p,_,y){if("__handler"===_)return Object.defineProperty(c,"__handler",{value:y,enumerable:!1,configurable:!0}),!0;const h=t.get(c);if((!r(c)||"length"!==_)&&c[_]===y)return!0;const m=c[_];if(n(m)&&(delete m.__key,delete m.__parent),c[_]=f&&n(y)?i(y,s):y,c.__handler||c.__parent){f&&n(y)&&o(c[_],_,c,f);const e=[_];let t=c;for(;t&&(!t.__handler||!1!==t.__handler(e,y,m,b));)t.__key&&t.__parent?(e.unshift(t.__key),t=t.__parent):t=null}if((!l||l.includes(_))&&(!a||!a.includes(_))&&h.has(_)){const t=h.get(_);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(d?u.enqueue(n):n())}return!0},deleteProperty(e,t){const r=e[t];return n(r)&&(delete r.__key,delete r.__parent),delete e[t],!0}});if(_){[...Object.getOwnPropertyNames(c),...Object.getPrototypeOf(c)&&["String","Number","Object","Array","Boolean","Date"].indexOf(Object.getPrototypeOf(c).constructor.name)<0?Object.getOwnPropertyNames(Object.getPrototypeOf(c)):[]].filter(e=>"constructor"!=e&&"function"==typeof c[e]).forEach(e=>c[e]=c[e].bind(b))}return b};return{observe:i,computed:c,dispose:s,Observable:e=>(class extends e{constructor(e,t){super();const n=i(e||{},t||{deep:!0,batch:!0});return new Proxy(this,{set:(e,t,r)=>("function"==typeof r?this[t]=r:(n[t]=r,void 0===this[t]&&Object.defineProperty(this,t,{get:()=>n[t],enumerable:!0,configurable:!0})),!0),deleteProperty:(e,t)=>(delete n[t],delete e[t],!0)})}}),Computable:e=>(class extends e{constructor(){super(),Object.defineProperty(this,"__computed",{value:[],enumerable:!1})}computed(e){this.__computed.push(c(e))}dispose(){for(;this.__computed.length;)s(this.__computed.pop())}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
