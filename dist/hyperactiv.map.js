!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=function(e){return e&&"object"==typeof e&&!(e instanceof Date)},o=Array.isArray,r=function(e,t,o,u){Object.defineProperty(e,"__key",{value:t,enumerable:!1,configurable:!0}),Object.defineProperty(e,"__parent",{value:o,enumerable:!1,configurable:!0}),u&&Object.entries(e).forEach(function([t,o]){!n(o)||o.__key&&o.__parent||r(e[t],t,e)})},u={timeout:null,queue:new Set,process(){for(const e of u.queue)e();u.queue.clear(),u.timeout=null},enqueue(e){null===u.timeout&&(u.timeout=setTimeout(u.process,0)),u.queue.add(e)}},c=function(t,{autoRun:n=!0,callback:o=null,bind:r=null}={}){const u=new Proxy(t,{apply(t,n,c){const s=function(s=null){e.unshift(o||u);const i=s?s():t.apply(r||n,c);return e.shift(),i};return c.push({computeAsync:function(e){return s(e)}}),s()}});return n&&u(),u},s=function(e){return e.__disposed=!0},i=function(c,s={}){const{props:f=null,ignore:l=null,batch:p=!1,deep:a=!1,handler:d=null,bind:b=!1}=s;if(c.__observed)return c;t.set(c,new Map),a&&Object.entries(c).forEach(function([e,t]){n(t)&&(c[e]=i(t,s),d&&r(c[e],e,c))});const _=new Proxy(c,{get(n,o){if("__observed"===o)return!0;if((!f||f.includes(o))&&(!l||!l.includes(o))&&e.length){const n=t.get(c);n.has(o)||n.set(o,new Set),n.get(o).add(e[0])}return c[o]},set(b,y,h){const m=t.get(c);if((!o(c)||"length"!==y)&&c[y]===h)return!0;const g=c[y];if(c[y]=a&&n(h)?i(h,s):h,d&&a&&n(h)&&r(c[y],y,c,a),d){const e=[y];let t=c;for(;t.__key&&t.__parent;)e.unshift(t.__key),t=t.__parent;d(e,h,g,_)}if((!f||f.includes(y))&&(!l||!l.includes(y))&&m.has(y)){const t=m.get(y);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(p?u.enqueue(n):n())}return!0}});if(b){[...Object.getOwnPropertyNames(c),...Object.getPrototypeOf(c)&&["String","Number","Object","Array","Boolean","Date"].indexOf(Object.getPrototypeOf(c).constructor.name)<0?Object.getOwnPropertyNames(Object.getPrototypeOf(c)):[]].filter(e=>"constructor"!=e&&"function"==typeof c[e]).forEach(e=>c[e]=c[e].bind(_))}return _};return{observe:i,computed:c,dispose:s,Observable:e=>(class extends e{constructor(e,t){super();const n=i(e||{},t||{deep:!0,batch:!0});return new Proxy(this,{set:(e,t,o)=>("function"==typeof o?this[t]=o:(n[t]=o,void 0===this[t]&&Object.defineProperty(this,t,{get:()=>n[t],enumerable:!0,configurable:!0})),!0),deleteProperty:(e,t)=>(delete n[t],delete e[t],!0)})}}),Computable:e=>(class extends e{constructor(){super(),Object.defineProperty(this,"__computed",{value:[],enumerable:!1})}computed(e){this.__computed.push(c(e))}dispose(){for(;this.__computed.length;)s(this.__computed.pop())}}),container:function(e){return"function"==typeof e&&(e={deep:!0,batch:!0,handler:e}),i({},e)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
