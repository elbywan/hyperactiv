!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=function(e){return e&&"object"==typeof e&&!(e instanceof Date)},o=Array.isArray,u=function(e,t,n){Object.defineProperty(e,"__key",{value:t,enumerable:!1,configurable:!0}),Object.defineProperty(e,"__parent",{value:n,enumerable:!1,configurable:!0})},r={timeout:null,queue:new Set,process(){for(const e of r.queue)e();r.queue.clear(),r.timeout=null},enqueue(e){null===r.timeout&&(r.timeout=setTimeout(r.process,0)),r.queue.add(e)}},c=function(i,s={}){const{props:f=null,ignore:l=null,batch:a=!1,deep:p=!1,handler:d=null,bind:b=!1}=s;if(i.__observed)return i;t.set(i,new Map),p&&Object.entries(i).forEach(function([e,t]){n(t)&&(i[e]=c(t,s),d&&u(i[e],e,i))});const y=new Proxy(i,{get(n,o){if("__observed"===o)return!0;if((!f||f.includes(o))&&(!l||!l.includes(o))&&e.length){const n=t.get(i);n.has(o)||n.set(o,new Set),n.get(o).add(e[0])}return i[o]},set(b,_,g){const m=t.get(i);if((!o(i)||"length"!==_)&&i[_]===g)return!0;if(i[_]=p&&n(g)?c(g,s):g,d&&p&&n(g)&&u(i[_],_,i),d){const e=[_];let t=i;for(;t.__key&&t.__parent;)e.unshift(t.__key),t=t.__parent;d(e,g,y)}if((!f||f.includes(_))&&(!l||!l.includes(_))&&m.has(_)){const t=m.get(_);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(a?r.enqueue(n):n())}return!0}});if(b){[...Object.getOwnPropertyNames(i),...Object.getPrototypeOf(i)?Object.getOwnPropertyNames(Object.getPrototypeOf(i)):[]].filter(e=>"constructor"!=e&&"function"==typeof i[e]).forEach(e=>Object.defineProperty(i,e,{value:i[e].bind(y),enumerable:!1,configurable:!0}))}return y};return{observe:c,computed:function(t,{autoRun:n=!0,callback:o=null,bind:u=null}={}){const r=new Proxy(t,{apply(t,n,c){const i=function(i=null){e.unshift(o||r);const s=i?i():t.apply(u||n,c);return e.shift(),s};return c.push({computeAsync:function(e){return i(e)}}),i()}});return n&&r(),r},dispose:function(e){return e.__disposed=!0}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
