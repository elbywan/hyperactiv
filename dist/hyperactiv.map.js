!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.hyperactiv=t()}(this,function(){"use strict";const e=[],t=new WeakMap,n=function(e){return e&&"object"==typeof e&&!(e instanceof Date)},r=Array.isArray,o=function(e,t,r,u){Object.defineProperty(e,"__key",{value:t,enumerable:!1,configurable:!0}),Object.defineProperty(e,"__parent",{value:r,enumerable:!1,configurable:!0}),u&&Object.entries(e).forEach(function([t,r]){!n(r)||r.__key&&r.__parent||o(e[t],t,e)})},u={timeout:null,queue:new Set,process(){for(const e of u.queue)e();u.queue.clear(),u.timeout=null},enqueue(e){null===u.timeout&&(u.timeout=setTimeout(u.process,0)),u.queue.add(e)}},c=function(i,l={}){const{props:s=null,ignore:f=null,batch:a=!1,deep:_=!0,bubble:d=null,bind:p=!1}=l;if(i.__observed)return i;t.set(i,new Map),_&&Object.entries(i).forEach(function([e,t]){n(t)&&(i[e]=c(t,l),d&&o(i[e],e,i))});const b=new Proxy(i,{get(n,r){if("__observed"===r)return!0;if((!s||s.includes(r))&&(!f||!f.includes(r))&&e.length){const n=t.get(i);n.has(r)||n.set(r,new Set),n.get(r).add(e[0])}return i[r]},set(p,y,h){if("__handler"===y)Object.defineProperty(i,"__handler",{value:h,enumerable:!1,configurable:!0});else{const p=t.get(i);if((!r(i)||"length"!==y)&&i[y]===h)return!0;const g=i[y];if(n(g)&&(delete g.__key,delete g.__parent),i[y]=_&&n(h)?c(h,l):h,_&&n(h)&&(d||i.__parent)&&o(i[y],y,i,_),!i.__handler||!1!==i.__handler([y],h,g,b)){const e=[i.__key,y];let t=i.__parent;for(;t&&(!t.__handler||!1!==t.__handler(e,h,g,b));)t.__key&&t.__parent?(e.unshift(t.__key),t=t.__parent):t=null}if((!s||s.includes(y))&&(!f||!f.includes(y))&&p.has(y)){const t=p.get(y);for(const n of t)n.__disposed?t.delete(n):n!==e[0]&&(a?u.enqueue(n):n())}}return!0},deleteProperty(e,t){const r=e[t];return n(r)&&(delete r.__key,delete r.__parent),delete e[t],!0}});if(p){[...Object.getOwnPropertyNames(i),...Object.getPrototypeOf(i)&&["String","Number","Object","Array","Boolean","Date"].indexOf(Object.getPrototypeOf(i).constructor.name)<0?Object.getOwnPropertyNames(Object.getPrototypeOf(i)):[]].filter(e=>"constructor"!=e&&"function"==typeof i[e]).forEach(e=>i[e]=i[e].bind(b))}return b};return{observe:c,computed:function(t,{autoRun:n=!0,callback:r=null,bind:o=null}={}){const u=new Proxy(t,{apply(t,n,c){const i=function(i=null){e.unshift(r||u);const l=i?i():t.apply(o||n,c);return e.shift(),l};return c.push({computeAsync:function(e){return i(e)}}),i()}});return n&&u(),u},dispose:function(e){return e.__disposed=!0}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
